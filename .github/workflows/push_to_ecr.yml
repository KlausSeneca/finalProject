---
name: Deploy to ECR
on:
  workflow_dispatch:
    branches:
      - main
    paths:
      - Application/**
  push:
    branches:
      - main
    paths:
      - Application/**
  pull_request:
    branches:
      - main
    paths:
      - Application/**
env:
  APPLICATION_ECR_PREFIX: app-image
  DATABASE_ECR_PREFIX: database-image
  ECR_REPOSITORY: clo835-final-project
  WORKING_DIR: Application/
  AWS_REGION: us-east-1
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{env.WORKING_DIR}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, test and push image to Amazon ECR
        id: build-image
        env:
          DB_PWD: test_pwd
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: >
          # Build and tag

          docker build -t $ECR_REGISTRY/${DATABASE_ECR_PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG} -f Dockerfile_mysql .

          docker build -t $ECR_REGISTRY/${APPLICATION_ECR_PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG} .


          # Unit test

          # docker run -d -e MYSQL_ROOT_PASSWORD=$DB_PWD --name mysql $ECR_REGISTRY/${DATABASE_ECR_PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG} 

          # docker ps

          # echo "Pause for 10 seconds to let database container start"

          # sleep 10


          # docker run -d -p 81:80 -e DBHOST="172.17.0.2" -e DBPWD=$DB_PWD $ECR_REGISTRY/${APPLICATION_ECR_PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG}

          # docker ps

          # echo "Pause for 10 seconds to let database container start"

          # sleep 10


          # curl 172.17.0.3:81 -vvv      
              
          # Push

          docker push $ECR_REGISTRY/${DATABASE_ECR_PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG}

          docker push $ECR_REGISTRY/${APPLICATION_ECR_PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG}
